@layout LoginLayout
@page "/"
@using MauiCorpClient.Data.Request;
@using MauiCorpClient.Data.Response;
@using Newtonsoft.Json;
@using System.Text;
@using System.Net.Http.Headers;
@inject HttpClient client;
@inject NavigationManager NavManager;
@inject ProgressBarService ProgressBarService

<div class="container">
	<div>
		<img class="login-logo" src="img/your-loyalty_logo.png">
	</div>
	<div class="main">
		<input type="checkbox" id="chk" aria-hidden="true">

		<div class="login">
			<form>
				<label class="login-label" for="chk" aria-hidden="true">Login</label>
				<input @bind="@LoginModel.Email" @oninput="@((e) => { LoginModel.Email=(string)e.Value;})" class="login-input" type="email" name="email" placeholder="Email" required="">
				<input @bind="@LoginModel.Password" @oninput="@((e) => { LoginModel.Password=(string)e.Value;})" class="login-input" type="password" name="pswd" placeholder="Password" required="">
				<button type="button" @onclick="Authorize" class="login-button">Login</button>
			</form>
		</div>

		<div class="signup">
			<form>
				<label class="login-label" for="chk" aria-hidden="true">Sign up</label>
				<input @bind="@RegisterModel.Name" @oninput="@((e) => { RegisterModel.Name=(string)e.Value;})" class="login-input" type="text" name="txt" placeholder="User name" required="">
				<input @bind="@RegisterModel.Email" @oninput="@((e) => { RegisterModel.Email=(string)e.Value;})" class="login-input" type="email" name="email" placeholder="Email" required="">
				<input @bind="@RegisterModel.Password" @oninput="@((e) => { RegisterModel.Password=(string)e.Value;})" class="login-input" type="password" name="pswd" placeholder="Password" required="">
				<input @bind="@RegisterModel.RPassword" @oninput="@((e) => { RegisterModel.RPassword=(string)e.Value;})" class="login-input" type="password" name="r_pswd" placeholder="Repeat Password" required="">
				<button type="button" @onclick="Register" class="login-button">Sign up</button>
			</form>
		</div>
	</div>
</div>

@code {
	public RegistrationRequest RegisterModel { get; set; } = new RegistrationRequest();
	public LoginRequest LoginModel { get; set; } = new LoginRequest();


	protected async void Register()
	{
		ProgressBarService.Visible = true;

		var request = new HttpRequestMessage(HttpMethod.Post,
			"https://yourloyalty.space/api/auth/users/register");

		var jsonContent = JsonConvert.SerializeObject(RegisterModel);

		request.Content = new StringContent(jsonContent, Encoding.UTF8, "application/json");

		var response = await client.SendAsync(request).Result.Content.ReadAsStringAsync();

		var registrationResponse = JsonConvert.DeserializeObject<RegistrationResponse>(response);

		await SecureStorage.Default.SetAsync("access_token", registrationResponse.Token);

		ProgressBarService.Visible = false;
	}

	protected async void Authorize()
	{
		ProgressBarService.Visible = true;
		var request = new HttpRequestMessage(HttpMethod.Post,
			"https://yourloyalty.space/api/auth/users/login");

		var jsonContent = JsonConvert.SerializeObject(LoginModel);

		request.Content = new StringContent(jsonContent, Encoding.UTF8, "application/json");
		var token = await SecureStorage.Default.GetAsync("access_token");
		client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

		var response = await client.SendAsync(request);


		if (response.IsSuccessStatusCode)
		{
			var responseContent = await response.Content.ReadAsStringAsync();

			var loginResponse = JsonConvert.DeserializeObject<LoginResponse>(responseContent);

			await SecureStorage.Default.SetAsync("access_token", loginResponse.Token);

			await LoginUser();
		}
		ProgressBarService.Visible = false;
	}

	private async Task LoginUser()
	{
		var token = await SecureStorage.Default.GetAsync("access_token");
		if (token != null)
		{
			NavManager.NavigateTo("/home");
		}
	}

	protected override async Task OnInitializedAsync()
	{
		ProgressBarService.Visible = true;
		await LoginUser();
		ProgressBarService.Visible = false;
	}
}
